/*
 * JDrupes MDoclet
 * Copyright (C) 2021 Michael N. Lipp
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

sourceCompatibility = '17'
targetCompatibility = '17'

version = '3.0.0-SNAPSHOT'

description = 'A taglet for processing PlantUML in javadoc comments'

archivesBaseName = "plantuml-taglet"

configurations {
    mdoclet
}

dependencies {
    implementation group:'net.sourceforge.plantuml', name:'plantuml', version:'1.2023.8'

    // Add this to compile as well for debugging
    implementation 'org.jdrupes.mdoclet:doclet:3.1.0'
    // mdoclet 'com.github.mnlipp.jdrupes-mdoclet:doclet:master-SNAPSHOT'
}

// Configure sensible layout
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
}

compileJava {
//    options.compilerArgs << '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED'
}

jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenPublication }
        rename ".*", "pom.xml"
    }

    manifest {
        inputs.property("gitDescriptor", { grgit.describe() })

        // Set Git revision information in the manifests of built bundles
        attributes('Git-SHA': grgit.head().id)
    }

    doFirst {
        manifest {
            attributes('Git-Descriptor': inputs.properties['gitDescriptor'])
        }
    }
}

configurations {
    markdownDoclet
}

dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:3.1.0"
}

task testJavaDoc(type: JavaExec) {
    dependsOn jar

    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
               '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED']
    classpath sourceSets.main.compileClasspath
    classpath files(tasks.jar)

    main = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', 'test',
            '-use',
            '-linksource',
            '-link', 'https://docs.oracle.com/en/java/javase/17/docs/api/',
            '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED',
            '-d', 'build/test-javadocs',
            '-tagletpath', files(tasks.jar).asType(List).join(":"),
            '-taglet', 'org.jdrupes.taglets.plantUml.PlantUml',
            'testfiles/test/TestBlockFeature.java'
    ]
}
check.dependsOn(testJavaDoc)

task apidocs(type: JavaExec) {
    dependsOn classes
    inputs.file "overview.md"

    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED']
    classpath sourceSets.main.compileClasspath
    classpath files(tasks.jar)

    ext.destinationDir = "$projectDir/build/docs/javadoc"

    main = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', 'PlantUML Taglet',
        '-use',
        '-linksource',
        '-link', 'https://docs.oracle.com/en/java/javase/17/docs/api/',
        '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '-doclet', 'org.jdrupes.mdoclet.MDoclet',
        '-docletpath', configurations.markdownDoclet.files
            .asType(List).join(File.pathSeparator),
        '--disable-auto-highlight',
        '-tagletpath', files(tasks.jar).asType(List).join(File.pathSeparator),
        '-taglet', 'org.jdrupes.taglets.plantUml.PlantUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.StartUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.EndUml',
        '-overview', 'overview.md',
        '-d', destinationDir,
        '-sourcepath', 'src/',
        '-subpackages', 'org.jdrupes.taglets',
        '-bottom', file("../misc/javadoc.bottom.txt").text,
        '--allow-script-in-comments',
        '-Xdoclint:-html',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED'
        ]

    ignoreExitValue true
}

task docs (type: Copy) {
    from apidocs.destinationDir
    into '../../jdrupes-taglets.gh-pages/plantuml-taglet/javadoc/'
}

task fatJar(type:Jar) {
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    classifier "all"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

task javadocJar(type: Jar) {
    from apidocs.destinationDir
    classifier "javadoc"
}

// Allow build without signing information (e.g. travis)
if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

publishing {

    repositories {
        maven {
            name "snapshot"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username project.properties['sonatypeUsername'] ?: "nouser"
                password project.properties['sonatypePassword'] ?: "nopass"
            }
        }
        maven {
            name "release"
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username project.properties['sonatypeUsername'] ?: "nouser"
                password project.properties['sonatypePassword'] ?: "nopass"
            }
        }
    }

}

// Additional configuration of publishing
apply plugin: ConfigurePublishing

configurePublishing {
    withPomXml {
        asNode().with {
            appendNode('url', 'https://github.com/mnlipp/jdrupes-taglets')
            appendNode('scm').with {
                appendNode('url', 'scm:git@github.com:mnlipp/jdrupes-taglets.git')
                appendNode('connection', 'scm:git@github.com:mnlipp/jdrupes-taglets.git')
                appendNode('developerConnection', 'git@github.com:mnlipp/jdrupes-taglets.git')
            }
            appendNode('licenses').with {
                appendNode('license').with {
                    appendNode('name', 'AGPL 3.0')
                    appendNode('url', 'https://www.gnu.org/licenses/gpl-3.0.en.html')
                    appendNode('distribution', 'repo')
                }
            }
            appendNode('developers').with {
                appendNode('developer').with {
                    appendNode('id', 'mnlipp')
                    appendNode('name', 'Michael N. Lipp')
                }
            }
        }
    }
}

task releaseTag {
    doLast {
        String name = project.name.startsWith(project.group + ".") ?
            project.name.substring(project.group.length() + 1) : project.name
        name = name.replace('.', '-')
        String tag = name + "-" + project.version
        grgit.tag.add(name: tag, message: "Released.")
        grgit.push(refsOrSpecs: [tag])
    }
}

build.mustRunAfter "releaseTag"

task stageOnOssrh {
    group = "publishing"

    dependsOn "releaseTag"
    dependsOn "publishMavenPublicationToReleaseRepository"
}

